// Code generated by mockery. DO NOT EDIT.

package commongo

import mock "github.com/stretchr/testify/mock"

// MockSecret is an autogenerated mock type for the Secret type
type MockSecret struct {
	mock.Mock
}

type MockSecret_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecret) EXPECT() *MockSecret_Expecter {
	return &MockSecret_Expecter{mock: &_m.Mock}
}

// GetAPIKey provides a mock function with given fields: key
func (_m *MockSecret) GetAPIKey(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSecret_GetAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPIKey'
type MockSecret_GetAPIKey_Call struct {
	*mock.Call
}

// GetAPIKey is a helper method to define mock.On call
//   - key string
func (_e *MockSecret_Expecter) GetAPIKey(key interface{}) *MockSecret_GetAPIKey_Call {
	return &MockSecret_GetAPIKey_Call{Call: _e.mock.On("GetAPIKey", key)}
}

func (_c *MockSecret_GetAPIKey_Call) Run(run func(key string)) *MockSecret_GetAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSecret_GetAPIKey_Call) Return(_a0 string) *MockSecret_GetAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecret_GetAPIKey_Call) RunAndReturn(run func(string) string) *MockSecret_GetAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentials provides a mock function with given fields: key
func (_m *MockSecret) GetCredentials(key string) (string, string) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func(string) (string, string)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// MockSecret_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type MockSecret_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
//   - key string
func (_e *MockSecret_Expecter) GetCredentials(key interface{}) *MockSecret_GetCredentials_Call {
	return &MockSecret_GetCredentials_Call{Call: _e.mock.On("GetCredentials", key)}
}

func (_c *MockSecret_GetCredentials_Call) Run(run func(key string)) *MockSecret_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSecret_GetCredentials_Call) Return(_a0 string, _a1 string) *MockSecret_GetCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecret_GetCredentials_Call) RunAndReturn(run func(string) (string, string)) *MockSecret_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecret creates a new instance of MockSecret. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecret(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecret {
	mock := &MockSecret{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
